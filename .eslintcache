[{"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\index.jsx":"1","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\App.jsx":"2","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoList.jsx":"3","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoSearchBar.jsx":"4","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoListItem.jsx":"5","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoFilters.jsx":"6","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoFiltersContainer.jsx":"7","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\Attribution.jsx":"8"},{"size":145,"mtime":1609545525000,"results":"9","hashOfConfig":"10"},{"size":3739,"mtime":1609759203844,"results":"11","hashOfConfig":"10"},{"size":1472,"mtime":1609705615149,"results":"12","hashOfConfig":"10"},{"size":1552,"mtime":1609700139447,"results":"13","hashOfConfig":"10"},{"size":5716,"mtime":1609758557775,"results":"14","hashOfConfig":"10"},{"size":583,"mtime":1609705606271,"results":"15","hashOfConfig":"10"},{"size":995,"mtime":1609705621168,"results":"16","hashOfConfig":"10"},{"size":251,"mtime":1609767312478,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1dnkbli",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\index.jsx",[],["37","38"],"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\App.jsx",[],"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoList.jsx",[],"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoSearchBar.jsx",[],"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoListItem.jsx",["39"],"//importing react library\nimport React, { useRef, useEffect } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\n//list Item component\nconst TodoListItem = ({\n  todo,\n  todos,\n  setTodos,\n  filterType,\n  id,\n  lightMode,\n  index,\n  moveTodo,\n}) => {\n  //refs\n  const circleRef = useRef(null);\n  const checkIconRef = useRef(null);\n  const todoTextRef = useRef(null);\n  const todoListItem = useRef(null);\n  //useEffect\n  useEffect(() => {\n    todoTextRef.current.classList.remove('cross__text__dark');\n    todoTextRef.current.classList.remove('cross__text__light');\n    checkIconRef.current.style.visibility = 'hidden';\n    setTodos(\n      todos.map(someTodo => {\n        return {\n          ...someTodo,\n          isCompleted: false,\n        };\n      })\n    );\n  }, [lightMode]);\n  //drag and drop funtionnality\n  const [, drop] = useDrop({\n    accept: 'card',\n    hover(item, monitor) {\n      if (!todoListItem.current) {\n        return;\n      }\n      const dragIndex = item.index;\n      const hoverIndex = index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = todoListItem.current?.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      moveTodo(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex;\n    },\n  });\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: 'card', id, index },\n    collect: monitor => ({\n      isDragging: monitor.isDragging(),\n    }),\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(todoListItem));\n  //checking filter type (active/completed/all)\n  useEffect(() => {\n    switch (filterType) {\n      case 'completed':\n        //making uncompleted items invisible\n        todos.map(someTodo => {\n          if (\n            someTodo.isCompleted === false &&\n            someTodo.id === todoListItem.current.getAttribute('id')\n          ) {\n            todoListItem.current.classList.add('invisible');\n          }\n          return someTodo;\n        });\n        break;\n      case 'active':\n        //making completed items invisible\n        todoListItem.current.classList.remove('invisible');\n        todos.map(someTodo => {\n          if (\n            someTodo.isCompleted === true &&\n            someTodo.id === todoListItem.current.getAttribute('id')\n          ) {\n            todoListItem.current.classList.add('invisible');\n          }\n          return someTodo;\n        });\n        break;\n      default:\n        //all items should be visible (all filter)\n        todoListItem.current.classList.remove('invisible');\n        break;\n    }\n  }, [filterType, todos]);\n  //deleting todos\n  const onCrossIconClick = () => {\n    setTodos(todos.filter(someTodo => someTodo !== todo));\n  };\n  //checking completed todos\n  const onCheckCircleClick = () => {\n    if (lightMode) {\n      circleRef.current.classList.toggle('white__circle');\n    }\n    circleRef.current.classList.toggle('completed');\n    setTodos(\n      todos.map(someTodo => {\n        if (someTodo.id === todo.id) {\n          return {\n            ...someTodo,\n            isCompleted: !someTodo.isCompleted,\n          };\n        }\n        return someTodo;\n      })\n    );\n    markAsComplete();\n  };\n  //mark as complete ui\n  const markAsComplete = () => {\n    checkIconRef.current.style.visibility =\n      todo.isCompleted === false ? 'visible' : 'hidden';\n    lightMode === true\n      ? todoTextRef.current.classList.toggle('cross__text__light')\n      : todoTextRef.current.classList.toggle('cross__text__dark');\n  };\n  return (\n    <div\n      className={`todo__list__item ${\n        lightMode === true ? 'white__list__item' : ''\n      } `}\n      style={{ opacity }}\n      draggable=\"true\"\n      ref={todoListItem}\n      id={id}\n    >\n      <div className=\"todo__item__left\">\n        <div\n          className={`check__circle__container ${\n            lightMode === true ? 'light__circle__border' : ''\n          }`}\n          onClick={onCheckCircleClick}\n        >\n          <div\n            className={`check__circle ${\n              lightMode === true ? 'white__circle' : ''\n            }`}\n            ref={circleRef}\n          >\n            <div className=\"check__circle__icon\">\n              <img\n                src=\"./images/icon-check.svg\"\n                alt=\"check-icon\"\n                ref={checkIconRef}\n              />\n            </div>\n          </div>\n        </div>\n        <p className=\"todo__text\" ref={todoTextRef}>\n          {todo.title}\n        </p>\n      </div>\n      <div className=\"cross__icon__container\" onClick={onCrossIconClick}>\n        <img src=\"./images/icon-cross.svg\" alt=\"cross-icon\" />\n      </div>\n    </div>\n  );\n};\n\nexport default TodoListItem;\n","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoFilters.jsx",[],"C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\TodoFiltersContainer.jsx",["40"],"//importing react library\nimport React, { useRef } from 'react';\n//importing filters component\nimport TodoFilters from './TodoFilters';\n//filters component\nconst TodoFiltersContainer = ({\n  todos,\n  setTodos,\n  lightMode,\n  toggleColor,\n  updateFilterType,\n}) => {\n  //clearing completed todos\n  const clearCompleted = () => {\n    setTodos(todos.filter(someTodo => someTodo.isCompleted === false));\n  };\n  return (\n    <div\n      className={`todo__filters ${\n        lightMode === true ? 'white__filters__list' : ''\n      }`}\n    >\n      <span className=\"todo__items__left\">{todos.length} items left</span>\n      <TodoFilters\n        lightMode={lightMode}\n        toggleColor={toggleColor}\n        updateFilterType={updateFilterType}\n      />\n      <span\n        className={`clear__todo ${\n          lightMode === true ? 'white__span__hover' : ''\n        }`}\n        onClick={clearCompleted}\n      >\n        Clear completed\n      </span>\n    </div>\n  );\n};\n\nexport default TodoFiltersContainer;\n","C:\\Users\\elmou.DESKTOP-CEDQO7M\\OneDrive\\Bureau\\React Websites\\Todo-app-master\\src\\components\\Attribution.jsx",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":33,"column":6,"nodeType":"47","endLine":33,"endColumn":17,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":2,"column":17,"nodeType":"51","messageId":"52","endLine":2,"endColumn":23},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setTodos' and 'todos'. Either include them or remove the dependency array. If 'setTodos' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["55"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [lightMode, setTodos, todos]",{"range":"58","text":"59"},[773,784],"[lightMode, setTodos, todos]"]